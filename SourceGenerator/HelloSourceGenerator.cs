using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SourceGenerator
{
    [Generator]
    public class HelloSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);
            if (mainMethod == null) return;


            MySyntaxReceiver syntaxReceiver = (MySyntaxReceiver)context.SyntaxReceiver ??
                                              throw new ArgumentNullException(nameof(syntaxReceiver));

            var sb = new StringBuilder();
            // Head
            sb.Append($@"// <auto-generated/>
using System;
namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
  public static partial class {mainMethod.ContainingType.Name}
  {{
     static partial void HelloFrom(object obj) 
     {{
        var type_o = obj.GetType().ToString();
        switch (type_o)
        {{");

            // Body
            foreach (var cds in syntaxReceiver.ClassesToAugment)
            {
                sb.Append($@"
            case ""{mainMethod.ContainingNamespace}.{cds.Identifier}"":
                Console.WriteLine(""Hey from {cds.Identifier}"");
                break;");
            }

            // default
            sb.Append($@"
            default:
                Console.WriteLine(""Hey from default"");
                break;");

            // End
            sb.Append($@"
        }}
     }}
  }}
}}
");

            var typeName = mainMethod.ContainingType.Name;

            context.AddSource($"{typeName}.g.cs", sb.ToString());
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new MySyntaxReceiver());
        }
    }

    public class MySyntaxReceiver : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> ClassesToAugment { get; } =
            new List<ClassDeclarationSyntax>();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (!(syntaxNode is ClassDeclarationSyntax cds))
            {
                return;
            }

            var good = cds.AttributeLists.Any(als =>
              als.Attributes
                .Select(asy => asy.Name.ToString())
                .Any(n => n == "My")
            );

            if (good)
            {
                this.ClassesToAugment.Add(cds);
            }
        }
    }
}
